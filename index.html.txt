<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
    body {
        background: transparent;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .title {
        font-size: 2.6rem;
        font-weight: 700;
        color: #222;
        text-align: center;
        margin-bottom: 1.05rem;
    }

    .result-box {
        background: #fff;
        padding: 0.7rem;
        border-radius: 0.65rem;
        border: 1px solid #ddd;
        box-shadow: 0 0 8px rgba(0, 0, 0, 0.04);
        margin-top: 1rem;
        line-height: 1.4;
        text-align: center;
        font-size: 1.05rem;
    }

    .section-title {
        font-size: 1.2rem;
        font-weight: 600;
        margin-top: 1rem;
        margin-bottom: 0.5rem;
    }

    .status-green {
        color: green;
        font-weight: bold;
    }

    .status-red {
        color: red;
        font-weight: bold;
    }
</style>

<div class="container mt-4">
    <div class="title">NFT Hunt Series Six Progress</div>
    <div class="row justify-content-center mb-3">
        <div class="col-md-6">
            <input type="text" class="form-control" id="walletInput" placeholder="Enter your WAX wallet (e.g. yourname.wam)">
        </div>
    </div>
    <div class="row justify-content-center mb-3">
        <div class="col-md-2 text-center">
            <button id="checkBtn" class="btn btn-success w-100">Check</button>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div id="result" class="result-box">Results will appear here...</div>
        </div>
    </div>
</div>

<script>
    let RpcEndpoint = "https://wax-atomic-api.eosphere.io";
    let Collection = "quackingwaxx";
    const excludedTemplateIds = ['882549'];

    async function fetchAllAssets(wallet) {
        const limit = 1000;
        let page = 1;
        let allAssets = [];
        let more = true;

        while (more) {
            const url = `${RpcEndpoint}/atomicassets/v1/assets?owner=${wallet}&collection_name=${Collection}&page=${page}&limit=${limit}&order=desc`;
            const response = await fetch(url);
            const json = await response.json();

            if (!json.success || !json.data.length) break;

            allAssets = allAssets.concat(json.data);
            if (json.data.length < limit) {
                more = false;
            } else {
                page++;
            }
        }

        return allAssets.filter(asset => !excludedTemplateIds.includes(asset.template.template_id));
    }

    async function checkWallet() {
        const wallet = document.getElementById('walletInput').value.trim();
        const resultElement = document.getElementById('result');
        resultElement.innerHTML = "<em>Checking wallet, please wait...</em>";

        if (!wallet) {
            resultElement.innerHTML = "‚úã Please enter a WAX wallet address.";
            return;
        }

        try {
            const assets = await fetchAllAssets(wallet);

            let s1to5Counts = {
                legendary: 0,
                mythic: 0,
                superrare: 0,
                epic: 0,
                rare: 0,
                common: 0
            };

            let seriesSixTemplates = {
                legendary: new Set(),
                superrare: new Set(),
                epic: new Set(),
                rare: new Set(),
                common: new Set()
            };

            let templateTracker = new Set();

            for (let asset of assets) {
                const templateId = asset.template.template_id;
                if (templateTracker.has(templateId)) continue;
                templateTracker.add(templateId);

                const attrs = asset.template.immutable_data || {};
                const rarityRaw = attrs.rarity || attrs.Rarity || attrs.RARITY || "";
                const rarity = rarityRaw.toLowerCase();
                const schema = asset.schema.schema_name || "";

                if (["series1", "series2", "series3", "series4", "series5"].includes(schema)) {
                    if (rarity.includes('legendary')) s1to5Counts.legendary++;
                    else if (rarity.includes('mythic')) s1to5Counts.mythic++;
                    else if (rarity.includes('super')) s1to5Counts.superrare++;
                    else if (rarity.includes('epic')) s1to5Counts.epic++;
                    else if (rarity === 'rare') s1to5Counts.rare++;
                    else if (rarity === 'common') s1to5Counts.common++;
                }

                if (schema === "seriessix") {
                    if (rarity.includes('legendary')) seriesSixTemplates.legendary.add(templateId);
                    else if (rarity.includes('super')) seriesSixTemplates.superrare.add(templateId);
                    else if (rarity.includes('epic')) seriesSixTemplates.epic.add(templateId);
                    else if (rarity === 'rare') seriesSixTemplates.rare.add(templateId);
                    else if (rarity === 'common') seriesSixTemplates.common.add(templateId);
                }
            }

            let huntRequirementsMet = 
                (s1to5Counts.legendary + s1to5Counts.mythic) >= 2 &&
                s1to5Counts.superrare >= 2 &&
                s1to5Counts.epic >= 5 &&
                s1to5Counts.rare >= 8 &&
                s1to5Counts.common >= 10;

            let s6RequirementsMet = 
                seriesSixTemplates.legendary.size >= 1 &&
                seriesSixTemplates.superrare.size >= 1 &&
                seriesSixTemplates.epic.size >= 3 &&
                seriesSixTemplates.rare.size >= 4 &&
                seriesSixTemplates.common.size >= 8;

            let resultHTML = `<div class="section-title">ü¶Ü Series 1‚Äì5 Hunt Check</div>`;
            resultHTML += `Legendary/Mythic: ${s1to5Counts.legendary + s1to5Counts.mythic} / 2<br>`;
            resultHTML += `Super-Rare: ${s1to5Counts.superrare} / 2<br>`;
            resultHTML += `Epic: ${s1to5Counts.epic} / 5<br>`;
            resultHTML += `Rare: ${s1to5Counts.rare} / 8<br>`;
            resultHTML += `Common: ${s1to5Counts.common} / 10<br><br>`;

            resultHTML += huntRequirementsMet
                ? `<span class="status-green">‚úÖ You meet the hunt requirements!</span><br><br>`
                : `<span class="status-red">‚úã You are missing some NFTs to qualify.</span><br><br>`;

            resultHTML += `<div class="section-title">ü¶Ü Series Six Progress</div>`;
            resultHTML += `Legendary: ${seriesSixTemplates.legendary.size} / 1<br>`;
            resultHTML += `Super-Rare: ${seriesSixTemplates.superrare.size} / 1<br>`;
            resultHTML += `Epic: ${seriesSixTemplates.epic.size} / 3<br>`;
            resultHTML += `Rare: ${seriesSixTemplates.rare.size} / 4<br>`;
            resultHTML += `Common: ${seriesSixTemplates.common.size} / 8<br><br>`;

            resultHTML += s6RequirementsMet
                ? `<span class="status-green">‚úÖ You meet the Series Six requirements!</span>`
                : `<span class="status-red">‚ö†Ô∏è Some seriessix NFTs may not yet be released</span>`;

            resultElement.innerHTML = resultHTML;

        } catch (error) {
            console.error(error);
            resultElement.innerHTML = "‚ö†Ô∏è Error fetching wallet data. Please try again later.";
        }
    }

    window.addEventListener('DOMContentLoaded', () => {
        document.getElementById('checkBtn').addEventListener('click', checkWallet);
    });
</script>


